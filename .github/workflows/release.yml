name: Build and Release

on:
  push:
    tags:
      - '*'
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci

    - name: Update package.json version from tag
      if: github.ref_type == 'tag'
      run: |
        sed -i 's/"version": ".*"/"version": "'"${{ github.ref_name }}"'"/' package.json

    - name: Build for all platforms
      run: |
        # Windows builds
        npm run build:win-x64
        npm run build:win-ia32
        
        # macOS builds
        npm run build:mac-x64
        npm run build:mac-arm64
        
        # Linux builds
        npm run build:linux-x64
        npm run build:linux-arm64
        
    - name: Make binaries executable
      run: |
        chmod +x dist/ffmpeg-this-macos-x64
        chmod +x dist/ffmpeg-this-macos-arm64
        chmod +x dist/ffmpeg-this-linux-x64
        chmod +x dist/ffmpeg-this-linux-arm64

    # Delete previous release (tag or main)
    - name: Delete existing release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_TAG=""
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          RELEASE_TAG="${{ github.ref_name }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          RELEASE_TAG="main"
        fi
        if [[ -n "$RELEASE_TAG" ]]; then
          echo "Deleting release $RELEASE_TAG"
          gh release delete $RELEASE_TAG -y || true
        else
          echo "Not a tag or main branch push, skipping release deletion."
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # Use tag name for tags, 'main' for main branch
        tag_name: ${{ github.ref_type == 'tag' && github.ref_name || 'main' }}
        # Use tag name for tags, 'main' for main branch release name
        release_name: ${{ github.ref_type == 'tag' && github.ref_name || 'main' }}
        # Use latest commit message for main branch body, default (tag message) for tags
        body: ${{ github.ref == 'refs/heads/main' && github.event.head_commit.message || '' }}
        draft: false
        # Mark main branch releases as pre-release, tags as full releases
        prerelease: ${{ github.ref == 'refs/heads/main' }}
        # Mark tagged releases as 'latest', main branch release not
        latest: ${{ github.ref_type == 'tag' }}

    # Upload Windows x64 build
    - name: Upload Windows x64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/ffmpeg-this-win-x64.exe
        asset_name: ffmpeg-this-win-x64.exe
        asset_content_type: application/vnd.microsoft.portable-executable

    # Upload Windows ia32 build
    - name: Upload Windows ia32 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/ffmpeg-this-win-ia32.exe
        asset_name: ffmpeg-this-win-ia32.exe
        asset_content_type: application/vnd.microsoft.portable-executable

    # Upload macOS x64 build
    - name: Upload macOS x64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/ffmpeg-this-macos-x64
        asset_name: ffmpeg-this-macos-x64
        asset_content_type: application/octet-stream

    # Upload macOS arm64 build
    - name: Upload macOS arm64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/ffmpeg-this-macos-arm64
        asset_name: ffmpeg-this-macos-arm64
        asset_content_type: application/octet-stream

    # Upload Linux x64 build
    - name: Upload Linux x64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/ffmpeg-this-linux-x64
        asset_name: ffmpeg-this-linux-x64
        asset_content_type: application/octet-stream

    # Upload Linux arm64 build
    - name: Upload Linux arm64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/ffmpeg-this-linux-arm64
        asset_name: ffmpeg-this-linux-arm64
        asset_content_type: application/octet-stream